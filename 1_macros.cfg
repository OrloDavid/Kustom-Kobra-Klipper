[firmware_retraction]
retract_length: 0.27
retract_speed: 65
unretract_extra_length: 0
unretract_speed: 60

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE_1
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=600
  _CLIENT_RETRACT LENGTH=.27
  G91
  G1 F2000 Z10
  G90
  PARK
  M106 S20
  SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=idle_state VALUE=False
  # clear pause_next_layer and pause_at_layer as preparation for next print
  SET_PAUSE_NEXT_LAYER ENABLE=0
  SET_PAUSE_AT_LAYER ENABLE=0 LAYER=0
  CANCEL_PRINT_BASE

[gcode_macro M420]
gcode:
    BED_MESH_PROFILE LOAD=default

[gcode_arcs]
resolution: 1.0

[gcode_macro Park]
gcode:
    STATUS_HOME
    G1 X-5 Y5 F6000

[gcode_macro Home_Park]
gcode:
    STATUS_HOME
    G28
    G1 X-5 Y5 F6000

[force_move]
enable_force_move: True

[gcode_macro Force_Raise_Z]
gcode:
  force_move stepper=stepper_z distance=10 velocity=10 accel=300

[gcode_macro Force_Lower_Z]
gcode:
  force_move stepper=stepper_z distance=-5 velocity=10 accel=300

[gcode_macro M109]
rename_existing: M99109
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  ; Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-3} MAXIMUM={s+3}   ; Wait for hotend temp (within 3 degrees)
    {% endif %}

[gcode_macro M190]
rename_existing: M99190
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   ; Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-3} MAXIMUM={s+3}  ; Wait for bed temp (within 3 degrees)
    {% endif %}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro H_G28]
gcode:
    STATUS_HOME
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}

[gcode_macro PID_Autotune_E]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=200

[gcode_macro PID_Autotune_B]
gcode:
    PID_CALIBRATE HEATER=bed TARGET=65

[gcode_macro PROBE_DOWN]
gcode:
    SET_PIN PIN=probe_enable VALUE=1

[gcode_macro PROBE_UP]
gcode:
    SET_PIN PIN=probe_enable VALUE=0

[gcode_macro PROBE_CALIBRATION]
gcode:
    PROBE_CALIBRATE

[gcode_macro PROBE_ACC_Test]
gcode:
    PROBE_ACCURACY
    
[gcode_macro ACCEL_QUERY_X]
gcode:
    ACCELEROMETER_QUERY AXIS=X

[gcode_macro ACCEL_QUERY_Y]
gcode:
    ACCELEROMETER_QUERY AXIS=Y

[gcode_macro ACCEL_AXES_NOISE]
gcode:
    MEASURE_AXES_NOISE

[gcode_macro INPUT_SHAPER]
gcode:
    SHAPER_CALIBRATE

[gcode_macro led_transmit_off]
gcode:
    SET_LED LED="rgbc_leds" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=0
    #Stops klipper from trying to control the LEDs

[gcode_macro all_led_off]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS

[gcode_macro all_led_on]
gcode:
    LED_TRANSMIT_OFF
      SET_LED_EFFECT EFFECT=kobra_leds_on

[gcode_macro status_idle]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_idle

[gcode_macro status_heating]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_heating

[gcode_macro status_starting]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_starting

[gcode_macro status_printing]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_printing

[gcode_macro status_finished]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_finished

[gcode_macro status_home]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_home

[gcode_macro status_park]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_park

[gcode_macro status_leveling]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_leveling

[gcode_macro LED_show_print_progress]
gcode:
    LED_TRANSMIT_OFF
    STOP_LED_EFFECTS
    SET_LED_EFFECT EFFECT=kobra_leds_progress

